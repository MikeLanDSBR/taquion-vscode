{
  "Block Comment": {
    "prefix": "comment",
    "body": [
      "// ------------------------------------",
      "// ${1:Section Name}",
      "// ------------------------------------",
      "$0"
    ],
    "description": "A block comment for sectioning code."
  },
  "Variable (let)": {
    "prefix": "let",
    "body": [
      "let ${1:variable_name} = ${2:value}"
    ],
    "description": "Creates a new variable with `let`."
  },
  "Constant (const)": {
    "prefix": "const",
    "body": [
      "const ${1:CONSTANT_NAME} = ${2:value}"
    ],
    "description": "Creates a new constant with `const`."
  },
  "Print Function": {
    "prefix": "print",
    "body": [
      "print(${1:value})"
    ],
    "description": "Prints a value to the console."
  },
  "Array Literal": {
    "prefix": "array",
    "body": [
      "let ${1:array_name} = [${2:10, 20, 30}]"
    ],
    "description": "Creates an array literal."
  },
  "While Loop": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "A `while` loop."
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "An `if` statement."
  },
  "If/Else Statement": {
    "prefix": "ife",
    "body": [
      "if (${1:condition}) {",
      "\t${2:if_block}",
      "} else {",
      "\t$0",
      "}"
    ],
    "description": "An `if/else` statement."
  },
  "Function Declaration": {
    "prefix": "func",
    "body": [
      "func ${1:name}(${2:params}) {",
      "\t$0",
      "}"
    ],
    "description": "Defines a new function."
  },
  "Main Function": {
    "prefix": "main",
    "body": [
      "package main",
      "",
      "func main() {",
      "\t$0",
      "}"
    ],
    "description": "The `package main` and `func main` boilerplate."
  },
  "Type Declaration": {
    "prefix": "type",
    "body": [
      "type ${1:TypeName} {",
      "\t${2:field}: ${3:string}",
      "\t$0",
      "}"
    ],
    "description": "Defines a new type."
  }
}